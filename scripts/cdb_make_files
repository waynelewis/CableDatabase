#!/usr/bin/python
#
# cdb_make_files (c) Stuart B. Wilkins 2013
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Part of the "CableDatabase" package
#

import optparse
import sys
import CableDatabase.library as cdblib
import CableDatabase.tools as cdbtools

def main():
	"""Main routine to be launched"""
	
	# Start the option parser.
	p = optparse.OptionParser()
	p.add_option('-v', '--verbose', default = False, action="store_true",
				 help = "Turn on verbose output [default: %default]")
	
	p.add_option('-s', '--sys', default = "XF:23ID1-VA", type="string",
			     help = "System part of PV name")
			   
	p.add_option('--search', default = "", type="string",
			     help = "Search options for cable database")
			     
	p.add_option('--subsys', default = False, action="store_true",
				 help = "Add branch to system name")
			     
	p.add_option('--vgc', default = False, action="store_true",
	             help = "Process vacuum gauge controllers substitution file")
	p.add_option('--vgc-file', default = "vgc.substitutions",
				 help = "Substitution file name [default: %default]")
				 
	p.add_option('--ipc', default = False, action="store_true",
				 help = "Process ion pump controllers substitution file")
	p.add_option('--ipc-file', default = "ipc.substitutions",
				 help = "Substitution file name [default: %default]")
				 
	p.add_option('--asyn', default = False, action="store_true",
	             help = "Process asyn substitution file")
	p.add_option('--asyn-file', default = "asyn.substitutions",
				 help = "Substitution file name [default: %default]")
	
	p.add_option('--rga', default = False, action="store_true",
	             help = "Process RGA substitution file")
	p.add_option('--rga-file', default = "rga.substitutions",
				 help = "Substitution file name [default: %default]")
				 
	p.add_option('--archiver', default = False, action="store_true",
			     help = "Process channel archiver XML file")
	p.add_option('--archiver-file', default = 'engine.xml',
				 help = "Substitution file name [default: %default]")
				 
	p.add_option('--host', default = 'localhost',
				 help = "Host of mysql database [default: %default]")
	
	
	# Parse options
	options, arguments = p.parse_args()
	
	# If run with no opions, show help
	if len(sys.argv) == 1:
		p.print_help()
		sys.exit()
	
	# Set hostname
	
	if options.verbose:
		cdblib.dbHost = options.host
		print "Connecting using host                       : {0} as \"{1}\"".format(cdblib.dbHost, cdblib.dbUser)
		
	# Make the search dictionary from command line arguments
	
	searchDict = {}
	if options.search:
		# Split string on ,
		for sopt in options.search.split(','):
			o = sopt.split('=')
			# Split options in =
			if len(o) == 2:
				# Use the '|' as an or separator
				searchDict[o[0]] = o[1].split('|')
			else:
				print "ERROR : syntax error in " + ','.join(o) + '\n'
				sys.exit()
	if options.verbose:
		for a,b, in searchDict.items():
			print "Using search                                : {0} = {1}".format(a,b)
    	
	ports1  = dict(zip(['{{VGC:{0:02}}}'.format(i) for i in range(1,7)],
				 ['tsrv1-P{0}'.format(i) for i in range(1,7)]))
	ports2  = dict(zip(['{{IPC:{0:02}}}'.format(i) for i in range(1,7)],
				 ['tsrv1-P{0}'.format(i + 8) for i in range(1,7)]))
	ports3  = dict(zip(['{{VGC:{0:02}}}'.format(i) for i in range(7,13)],
				 ['tsrv2-P{0}'.format(i - 6) for i in range(7,13)]))
	ports4  = dict(zip(['{{IPC:{0:02}}}'.format(i) for i in range(7,13)],
				 ['tsrv2-P{0}'.format(i + 8 - 6) for i in range(7,13)]))
	ports5  = dict(zip(['{{RGA:{0}}}'.format(i) for i in range(1,9)],
				 ['rga{0}-P1'.format(i) for i in range(1,9)]))
	ports = dict(ports1.items() + ports2.items() + ports3.items() + ports4.items() + ports5.items())
	
	# create substitution file for vacuum guage controllers
	
	if options.vgc:
		if options.verbose:
			print "Writing VGC substitution file               : {0}".format(options.vgc_file)
		mksvgc(options.sys, options.subsys, ports, searchDict, options.vgc_file)
		
	if options.ipc:
		if options.verbose:
			print "Writing IPC substitution file               : {0}".format(options.ipc_file)
		gammaipc(options.sys, options.subsys,ports, searchDict, options.ipc_file)
	
	if options.asyn:
		if options.verbose:
			print "Writing ASYN substitution file              : {0}".format(options.asyn_file)
		asynports(options.sys, options.subsys, ports, searchDict, options.asyn_file)
	
	if options.rga:
		if options.verbose:
			print "Writing RGA substitution file               : {0}".format(options.rga_file)
		rga(options.sys, options.subsys, ports, searchDict, options.rga_file)
	
	if options.archiver:
		if options.verbose:
			print "Writing channel archiver substitution file  : {0}".format(options.archiver_file)
		makeArchiver(options.sys, options.subsys, options.archiver_file)
	
	if options.verbose:
		print "Done."
		print ""
	
def makeArchiver(sys, filename):
	
	groups = list()
	
	rows = cdblib.doConnectionSearch(dict(branch = 1, cableUse = 'Cold Cathode Gauge'))
	groups += cdbtools.makeArchiverDict(sys, rows, 'CCG', ['P-I'])
	rows = cdblib.doConnectionSearch(dict(branch = 1, cableUse = 'Pirani Gauge'))
	groups += cdbtools.makeArchiverDict(sys, rows, 'TCG', ['P-I'])
	rows = cdblib.doConnectionSearch(dict(branch = 1, cableUse = 'HV Power Supply'))
	groups += cdbtools.makeArchiverDict(sys, rows, 'IP', ['P-I'])
	
	cdbtools.render('archiverEngine.mustache', filename, {'groups' : groups})	
	

	
def mksvgc(sys,subsys, ports, searchDict, filename):

	ccgRows = cdblib.doConnectionSearch(dict(cableUse = 'Cold Cathode Gauge', **searchDict))
	ccgGauges, ccgRelays = cdbtools.makeVacuumDictionary('mksvgc',sys,ccgRows,ports, addSubsystem = subsys)
	
	piraniRows = cdblib.doConnectionSearch(dict(cableUse = 'Pirani Gauge', **searchDict))
	piraniGauges, piraniRelays = cdbtools.makeVacuumDictionary('mksvgc',sys,piraniRows,ports, addSubsystem = subsys)
	
	controllers = cdbtools.makeSimpleDictionary(sys, ccgRows + piraniRows, 
											    ports, unique=True, source = True)
	
	cdbtools.render('vgc.mustache', filename, {'ccg'         : ccgGauges,
			                    			   'ccgRelays'   : ccgRelays,
											   'pirg'        : piraniGauges,
											   'pirgRelays'  : piraniRelays,
											   'controllers' : controllers})	
	
def gammaipc(sys,subsys, ports,searchDict, filename):	
	rows = cdblib.doConnectionSearch(dict(cableUse = 'HV Power Supply', **searchDict))
	
	ipc, ipcRelays = cdbtools.makeVacuumDictionary('gammaipc',sys,rows,ports, addSubsystem = subsys)
	controllers = cdbtools.makeSimpleDictionary(sys, rows, ports, unique=True, source = True)
	
	cdbtools.render('ipc.mustache', filename, {'controllers' : controllers,
		                                       'ip'          : ipc,
											   'setpoint'    : ipcRelays})
	
def asynports(sys,subsys, ports, searchDict, filename):
	rows = cdblib.doConnectionSearch(dict(cableUse = ['HV Power Supply', 
													  'Cold Cathode Gauge', 
													  'Pirani Gauge'],
										  **searchDict))
	asyn = cdbtools.makeSimpleDictionary(sys, rows, ports, source = True, unique = True)
	
	cdbtools.render('asyn.mustache', filename, {'asyn' : asyn})
	
def rga(sys,subsys, ports,searchDict, filename):
	rows = cdblib.doConnectionSearch(dict(cableUse = 'RGA SIGNAL', **searchDict))
	rga = cdbtools.makeSimpleDictionary(sys, rows, ports, addSubsystem = subsys)
	
	cdbtools.render('rga.mustache', filename, {'rga' : rga})	
	
if __name__ == "__main__":
	main()
	